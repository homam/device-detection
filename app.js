// Generated by LiveScript 1.2.0
(function(){
  var express, path, http, moment, stats, app, fillMissingPrarams, apiGet, apiResEnd;
  express = require('express');
  path = require('path');
  http = require('http');
  moment = require('moment');
  stats = require('./stats/stats');
  app = express();
  app.use(express['static']('/.public'));
  app.set('port', process.env.PORT || 3000);
  app.set('views', __dirname + '/views');
  app.set('view engine', 'ejs');
  app.use(express.logger('dev'));
  app.use(express.bodyParser());
  app.use(express.methodOverride());
  app.use(app.router);
  app.use(express.favicon());
  app.use(express['static'](__dirname + '/public'));
  app.use('/javascript', express['static']('public/javascript'));
  app.use(require('less-middleware')({
    src: __dirname + '/public'
  }));
  app.use(require('connect-coffee-script')({
    src: __dirname + '/public',
    bare: true
  }));
  app.get('/', function(req, res){
    return res.render('home/index', {
      title: ''
    });
  });
  app.use('/home/javascript', express['static']('views/home/javascript'));
  app.use('/home/style', express['static']('views/home/style'));
  fillMissingPrarams = function(p){
    p.from = p.from || moment().format("YYYY-MM-DD");
    p.to = p.to || moment().add('days', 1).format("YYYY-MM-DD");
    p.country = p.country || 0;
    p.ref = p.ref || 0;
    p.superCampaign = 0;
    return p;
  };
  apiGet = function(url, transform){
    return app.get(url, function(req, res){
      var p;
      p = fillMissingPrarams(req.params);
      return transform(p, function(obj){
        return apiResEnd(res, obj);
      });
    });
  };
  apiResEnd = curry$(function(res, obj){
    res.writeHead(200, {
      'Content-Type': 'application/json'
    });
    return function(){
      return res.end(JSON.stringify.apply(this, arguments));
    }(obj);
  });
  apiGet('/api/test/tree/:testid/:from?/:to?/:country?/:ref?', function(p, callback){
    return stats.testTree(p.testid, p.from, p.to, p.country, callback);
  });
  apiGet('/api/test/summary/:testid/:from?/:to?/:country?', function(p, callback){
    return stats.testSummary(p.testid, p.from, p.to, p.country, callback);
  });
  apiGet('/api/tests/:activeOnly?', function(p, callback){
    return stats.testsList(p.activeOnly, callback);
  });
  apiGet('/api/stats/tree/:from?/:to?/:country?/:ref?/:visits?', function(p, callback){
    return stats.statsTree(p.from, p.to, p.visits, p.country, p.ref, callback);
  });
  apiGet('/api/stats/summary/:from?/:to?/:country?/:ref?/:visits?', function(p, callback){
    return stats.statsSummary(p.from, p.to, p.visits, p.country, p.ref, callback);
  });
  apiGet('/api/stats/tree-by-superCampaign/:from?/:to?/:superCampaign?/:ref?/:visits?', function(p, callback){
    return stats.statsTreeBySuperCampaign(p.from, p.to, p.visits, p.superCampaign, p.ref, callback);
  });
  http.createServer(app).listen(app.get('port'), function(_){
    return console.log("express started at port " + app.get('port'));
  });
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
