// Generated by LiveScript 1.2.0
(function(){
  var prelude, map, flatten, groupBy, objToPairs, fold1, fold, filter, pow, sqrt, width, height, tree, diagonal, svg;
  window.requirejs = require;
  prelude = require('prelude-ls');
  map = prelude.map;
  flatten = prelude.flatten;
  groupBy = prelude.groupBy;
  objToPairs = prelude.objToPairs;
  fold1 = prelude.fold1;
  fold = prelude.fold;
  filter = prelude.filter;
  pow = Math.pow;
  sqrt = Math.sqrt;
  width = 1000;
  height = 2000;
  tree = d3.layout.tree().size([height, width - 160]);
  diagonal = d3.svg.diagonal().projection(function(d){
    return [d.y, d.x];
  });
  svg = d3.select("body").append("svg").attr("width", width).attr("height", height).append("g").attr("transform", "translate(40,0)");
  $.get('/data/ae.json', function(root){
    var sumStats, visits, subscribers, totalVisits, totalSubscribers, totalConv, operateOnRealNodes, updateAllNodes, killChildren, convStnDev, sor, color, nodes, links, link, node;
    sumStats = function(node, prop){
      var m;
      return fold1(curry$(function(x$, y$){
        return x$ + y$;
      }))((function(){
        var i$, ref$, len$, results$ = [];
        for (i$ = 0, len$ = (ref$ = node.stats).length; i$ < len$; ++i$) {
          m = ref$[i$];
          results$.push(m[prop]);
        }
        return results$;
      }()));
    };
    visits = function(node){
      return sumStats(node, 'visits');
    };
    subscribers = function(node){
      return sumStats(node, 'subscribers');
    };
    totalVisits = visits(root);
    totalSubscribers = subscribers(root);
    totalConv = totalSubscribers / totalVisits;
    operateOnRealNodes = function(node, func, seed){
      switch (false) {
      case node.children.length !== 0:
        return func(node, seed);
      default:
        return fold(function(ac, a){
          return operateOnRealNodes(a, func, ac);
        }, seed, node.children);
      }
    };
    updateAllNodes = function(node){
      switch (false) {
      case node.children.length !== 0:
        node;
        break;
      default:
        map(updateAllNodes, node.children);
      }
      node.visits = visits(node);
      node.subscribers = subscribers(node);
      node.conv = node.subscribers / node.visits;
      return node;
    };
    killChildren = function(node){
      switch (false) {
      case node.children.length !== 0:
        node;
        break;
      default:
        node.children = filter(function(it){
          return it.visits > 100;
        }, node.children);
        map(killChildren, node.children);
      }
      return node;
    };
    updateAllNodes(root);
    convStnDev = operateOnRealNodes(root, function(n, acc){
      return acc + sqrt(pow(n.conv - totalConv, 2)) * n.visits / totalVisits;
    }, 0);
    console.log(totalConv);
    console.log(convStnDev);
    root = killChildren(root);
    sor = function(a, b){
      if (!!a && a.length > 0 && a !== ' ') {
        return a;
      } else {
        return b;
      }
    };
    color = d3.scale.quantile().range(['#ffe866', '#fefd69', '#eafd6d', '#d5fc70', '#c2fa74', '#b1f977', '#a0f87a', '#91f77e', '#83f681', '#84f592', '#87f4a4', '#8af2b5', '#8df1c4', '#90f0d3', '#93efe0', '#96eeec', '#99e3ed', '#9cd7eb', '#9fccea', '#a2c3e9']);
    color.domain([0, root.conv + 2 * convStnDev]);
    nodes = tree.nodes(root);
    links = tree.links(nodes);
    link = svg.selectAll("path.link").data(links).enter().append("path").attr("class", "link").attr("d", diagonal);
    node = svg.selectAll("g.node").data(nodes).enter().append("g").attr("class", "node").attr("transform", function(d){
      return "translate(" + d.y + "," + d.x + ")";
    });
    node.append("circle").attr("r", 4.5);
    node.append("text").attr("dx", function(d){
      if (d.children.length > 0) {
        return -8;
      } else {
        return 8;
      }
    }).attr("dy", 3).attr("text-anchor", function(d){
      if (d.children.length > 0) {
        return "end";
      } else {
        return "start";
      }
    }).text(function(d){
      return sor(sor(d.device, d.brand), d.os);
    }).attr('fill', function(it){
      return color(it.conv);
    }).on('mouseover', function(it){
      return console.log(it.visits, it.conv);
    });
    return d3.select(self.frameElement).style("height", height + "px");
  });
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
