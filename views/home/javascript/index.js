// Generated by LiveScript 1.2.0
(function(){
  var prelude, ref$, Obj, map, filter, find, fold, foldr, fold1, all, flatten, sum, groupBy, objToPairs, partition, join, unique, pow, sqrt, trace, _sumStats, sumVisits, sumSubscribers, foldRealNodes, updateAllNodes, killChildren, stats, width, height, tree, diagonal, svg;
  prelude = require('prelude-ls');
  ref$ = require('prelude-ls'), Obj = ref$.Obj, map = ref$.map, filter = ref$.filter, find = ref$.find, fold = ref$.fold, foldr = ref$.foldr, fold1 = ref$.fold1, all = ref$.all, flatten = ref$.flatten, sum = ref$.sum, groupBy = ref$.groupBy, objToPairs = ref$.objToPairs, partition = ref$.partition, join = ref$.join, unique = ref$.unique;
  pow = Math.pow;
  sqrt = Math.sqrt;
  trace = function(v){
    console.log(v);
    return v;
  };
  _sumStats = curry$(function(methodSelector, prop, node){
    var m;
    return fold1(curry$(function(x$, y$){
      return x$ + y$;
    }))((function(){
      var i$, ref$, len$, results$ = [];
      for (i$ = 0, len$ = (ref$ = node.stats).length; i$ < len$; ++i$) {
        m = ref$[i$];
        if (methodSelector(m.method)) {
          results$.push(m[prop]);
        }
      }
      return results$;
    }()));
  });
  sumVisits = curry$(function(methodSelector, node){
    return _sumStats(methodSelector, 'visits', node);
  });
  sumSubscribers = curry$(function(methodSelector, node){
    return _sumStats(methodSelector, 'subscribers', node);
  });
  foldRealNodes = function(node, func, seed){
    switch (false) {
    case node.children.length !== 0:
      return func(node, seed);
    default:
      return fold(function(ac, a){
        return foldRealNodes(a, func, ac);
      }, seed, node.children);
    }
  };
  updateAllNodes = curry$(function(updater, node){
    switch (false) {
    case node.children.length !== 0:
      node;
      break;
    default:
      map(updateAllNodes(updater), node.children);
    }
    return updater(node);
  });
  killChildren = curry$(function(minVisits, visitsSelector, node){
    switch (false) {
    case node.children.length !== 0:
      node;
      break;
    default:
      node.children = filter(function(it){
        return visitsSelector(it) > minVisits;
      }, node.children);
      map(killChildren(minVisits, visitsSelector), node.children);
    }
    return node;
  });
  stats = function(methodFilter, node){
    var v, s, c;
    v = sumVisits(methodFilter, node);
    s = sumSubscribers(methodFilter, node);
    c = v === 0
      ? 0
      : s / v;
    return [v, s, c];
  };
  width = 1000;
  height = 2000;
  tree = d3.layout.tree().size([height, width - 160]);
  diagonal = d3.svg.diagonal().projection(function(d){
    return [d.y, d.x];
  });
  svg = d3.select("body").append("svg").attr("width", width).attr("height", height).append("g").attr("transform", "translate(40,0)");
  $.get('/data/ae.json', function(root){
    var allSubscriptionMethodsAndTheirLabels, selectedSubscriptionMethods, createMethodFilter, selectedMethodFilter, selectedVisits, selectedSubscribers, selectedStats, ref$, totalVisitsSelected, totalSubscribersSelected, convAverageSelected, convStnDevSelected, sor, color, nodes, links, link, node, onMouseOver;
    allSubscriptionMethodsAndTheirLabels = [["GooglePlay", 'G'], ["WAP", 'DW'], ["sms", 'sms'], ["Unknown", 'U'], ["SMS_WAP", 'MO'], ["JAVA_APP", 'J'], [null, 'NA'], ["WAPPIN", 'P']];
    selectedSubscriptionMethods = ['sms', 'smsto', 'mailto', 'JAVA_APP'];
    createMethodFilter = function(selectedMethods){
      return function(method){
        return in$(method, selectedMethods);
      };
    };
    selectedMethodFilter = createMethodFilter(selectedSubscriptionMethods);
    selectedVisits = sumVisits(selectedMethodFilter);
    selectedSubscribers = sumSubscribers(selectedMethodFilter);
    selectedStats = function(node){
      return stats(selectedMethodFilter, node);
    };
    ref$ = selectedStats(root), totalVisitsSelected = ref$[0], totalSubscribersSelected = ref$[1], convAverageSelected = ref$[2];
    convStnDevSelected = foldRealNodes(root, function(n, acc){
      var ref$, v, s, conv;
      ref$ = selectedStats(n), v = ref$[0], s = ref$[1], conv = ref$[2];
      return acc + sqrt(pow(conv - convAverageSelected, 2)) * v / totalVisitsSelected;
    }, 0);
    console.log(convAverageSelected);
    console.log(convAverageSelected);
    console.log(convStnDevSelected);
    root = killChildren(100, selectedVisits, root);
    sor = function(a, b){
      if (!!a && a.length > 0 && a !== ' ') {
        return a;
      } else {
        return b;
      }
    };
    color = d3.scale.quantile().range(['#f21b1b', '#ed771c', '#e9ce1e', '#a9e41f', '#53df21', '#22da40', '#23d58e', '#24cbd0', '#257ecb', '#2636c7']);
    color.domain([0, convAverageSelected + 2 * convStnDevSelected]);
    nodes = tree.nodes(root);
    links = tree.links(nodes);
    link = svg.selectAll("path.link").data(links).enter().append("path").attr("class", "link").attr("d", diagonal);
    node = svg.selectAll("g.node").data(nodes).enter().append("g").attr("class", "node").attr("transform", function(d){
      return "translate(" + d.y + "," + d.x + ")";
    });
    node.append("circle").attr("r", 4.5);
    node.append("text").attr("dx", function(d){
      if (d.children.length > 0) {
        return -8;
      } else {
        return 8;
      }
    }).attr("dy", 3).attr("text-anchor", function(d){
      if (d.children.length > 0) {
        return "end";
      } else {
        return "start";
      }
    }).text(function(d){
      var name, dStats, res$, i$, ref$, len$, ref1$, m, l, dMethodsWithVisits;
      name = sor(sor(sor(d.device, d.brand), d.os), '');
      res$ = [];
      for (i$ = 0, len$ = (ref$ = allSubscriptionMethodsAndTheirLabels).length; i$ < len$; ++i$) {
        ref1$ = ref$[i$], m = ref1$[0], l = ref1$[1];
        res$.push([m, l].concat(stats(createMethodFilter([m]), d)));
      }
      dStats = res$;
      dMethodsWithVisits = fold(function(acc, c){
        if (c[2] > 0) {
          return acc.concat(c[1]);
        } else {
          return acc;
        }
      }, [], dStats);
      return name + ' {' + join('|', dMethodsWithVisits) + '}';
    }).attr('fill', function(it){
      return color(selectedStats(it)[2]);
    }).on('mousedown', function(it){
      return onMouseOver(it);
    });
    return onMouseOver = function(node){
      var vTotal, ref$, vSelected, sSelected, cSelected;
      vTotal = sumVisits(function(){
        return true;
      }, node);
      ref$ = selectedStats(node), vSelected = ref$[0], sSelected = ref$[1], cSelected = ref$[2];
      return console.log(selectedStats(node));
    };
  });
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
  function in$(x, xs){
    var i = -1, l = xs.length >>> 0;
    while (++i < l) if (x === xs[i]) return true;
    return false;
  }
}).call(this);
