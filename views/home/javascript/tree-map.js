// Generated by LiveScript 1.2.0
(function(){
  var prelude, ref$, Obj, map, filter, each, find, fold, foldr, fold1, all, flatten, sum, groupBy, objToPairs, partition, join, unique, pow, sqrt, sor, shortenWurflDeviceName, exports;
  prelude = require('prelude-ls');
  ref$ = require('prelude-ls'), Obj = ref$.Obj, map = ref$.map, filter = ref$.filter, each = ref$.each, find = ref$.find, fold = ref$.fold, foldr = ref$.foldr, fold1 = ref$.fold1, all = ref$.all, flatten = ref$.flatten, sum = ref$.sum, groupBy = ref$.groupBy, objToPairs = ref$.objToPairs, partition = ref$.partition, join = ref$.join, unique = ref$.unique;
  pow = Math.pow;
  sqrt = Math.sqrt;
  sor = function(a, b){
    if (!!a && a.length > 0 && a !== ' ') {
      return a;
    } else {
      return b;
    }
  };
  shortenWurflDeviceName = function(name){
    var verIndex;
    if (!name) {
      return name;
    }
    verIndex = name.indexOf("ver");
    return verIndex > 0 ? name.substr(0, verIndex + 1) + '..' : name;
  };
  exports = exports || this;
  exports.treeMap = function(width, height){
    var $svg, updateTree;
    width == null && (width = 1000);
    height == null && (height = 1000);
    $svg = d3.select(".tree").append("svg").attr("width", width).attr("height", height).append("g").attr("transform", "translate(-.5,-.5)");
    updateTree = function(root, selectedStats){
      var ref$, totalVisitsSelected, totalSubscribersSelected, convAverageSelected, transition, color, treemap, $cell, $cellEnter, $renderNodeMethodsStats;
      ref$ = selectedStats(root), totalVisitsSelected = ref$[0], totalSubscribersSelected = ref$[1], convAverageSelected = ref$[2];
      transition = function(node){
        return node.transition().duration(500);
      };
      color = d3.scale.quantile().range(['#d94f34', '#d69838', '#cdd43c', '#8ad240', '#4dd044', '#48cd7a', '#4ccbb4', '#4fa9c9', '#5375c6', '#6656c4']);
      color.domain([0, convAverageSelected]);
      treemap = d3.layout.treemap().padding(0).size([width, height]).value(function(it){
        return selectedStats(it)[0];
      });
      $cell = $svg.data([root]).selectAll("g.cell").data(treemap.nodes);
      $cellEnter = $cell.enter().append("g").attr("class", "cell");
      transition($cell).attr("transform", function(d){
        return "translate(" + d.x + "," + d.y + ")";
      });
      $cellEnter.append("rect").on('mousedown', function(it){
        return $renderNodeMethodsStats(it);
      });
      transition($cell.select('rect').attr('class', function(it){
        return "node-" + it.treeId;
      })).attr("width", function(d){
        return d.dx;
      }).attr("height", function(d){
        return d.dy;
      }).style("fill", function(it){
        if (it.children && it.children.length > 0) {
          return 'none';
        } else {
          return color(selectedStats(it)[2]);
        }
      });
      $cellEnter.append("text").on('mousedown', function(it){
        return $renderNodeMethodsStats(it);
      });
      $cell.select('text').attr('x', 0).attr('dx', "0.35em").attr('dy', "0.9em").each(function(d){
        return d.key = d.children && d.children.length > 0
          ? null
          : shortenWurflDeviceName(sor(sor(sor(d.device, d.brand), d.os), ''));
      }).each(fontSize).each(wordWrap);
      $cell.exit().remove();
      return $renderNodeMethodsStats = function(node){
        return $(window).trigger("tree/node-selected", [node]);
      };
    };
    $(window).on("tree/node-selected", function(ref$, node){
      d3.selectAll('rect.selected').classed('selected', false);
      return d3.select(".node-" + node.treeId).classed('selected', true);
    });
    return {
      $svg: $svg,
      updateTree: updateTree
    };
  };
}).call(this);
