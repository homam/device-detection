// Generated by LiveScript 1.2.0
(function(){
  var ref$, Obj, map, filter, find, fold, foldr, fold1, all, flatten, sum, groupBy, objToPairs, partition, join, unique, request, requestJson;
  ref$ = require('prelude-ls'), Obj = ref$.Obj, map = ref$.map, filter = ref$.filter, find = ref$.find, fold = ref$.fold, foldr = ref$.foldr, fold1 = ref$.fold1, all = ref$.all, flatten = ref$.flatten, sum = ref$.sum, groupBy = ref$.groupBy, objToPairs = ref$.objToPairs, partition = ref$.partition, join = ref$.join, unique = ref$.unique;
  request = require('request');
  requestJson = curry$(function(url, callback){
    return request(url, function(arg$, arg1$, body){
      return callback(JSON.parse(body));
    });
  });
  requestJson('http://mobitransapi.mozook.com/devicetestingservice.svc/json/GetSubscriptionMethods', function(methodIds){
    var concludeTest, createTestStandard;
    concludeTest = curry$(function(prioMethods, fallbackMethods, methods, testid, wurflid){
      var methodsStr;
      methodsStr = join(',')(map(function(it){
        return it.id;
      })(map(function(name){
        return find(function(it){
          return it.name === name;
        }, methodIds);
      }, prioMethods.concat(methods, fallbackMethods))));
      return "http://mobitransapi.mozook.com/devicetestingservice.svc/json/ConcludeDeviceTest?test_id=" + testid + "&wurfl_id=" + wurflid + "&methods=" + methodsStr;
    });
    createTestStandard = concludeTest(['WAP'], ['WAPPIN', 'SMS_WAP']);
    return console.log(createTestStandard(['JAVA_APP', 'sms', 'mailto'], 45, 15031));
  });
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
