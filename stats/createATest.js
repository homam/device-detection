// Generated by LiveScript 1.2.0
(function(){
  var ref$, Obj, map, filter, find, fold, foldr, fold1, all, flatten, sum, groupBy, objToPairs, partition, join, unique, request, requestJson;
  ref$ = require('prelude-ls'), Obj = ref$.Obj, map = ref$.map, filter = ref$.filter, find = ref$.find, fold = ref$.fold, foldr = ref$.foldr, fold1 = ref$.fold1, all = ref$.all, flatten = ref$.flatten, sum = ref$.sum, groupBy = ref$.groupBy, objToPairs = ref$.objToPairs, partition = ref$.partition, join = ref$.join, unique = ref$.unique;
  request = require('request');
  requestJson = curry$(function(url, callback){
    return request(url, function(arg$, arg1$, body){
      return callback(JSON.parse(body));
    });
  });
  requestJson('http://mobitransapi.mozook.com/devicetestingservice.svc/json/GetSubscriptionMethods', function(methodIds){
    return requestJson('http://mobitransapi.mozook.com/devicetestingservice.svc/json/GetAllCountries', function(countryIds){
      var createTest, createTestStandard;
      createTest = curry$(function(countries, methods, wurflid){
        var methodsStr, id, name, countriesStr;
        methodsStr = join(',')((function(){
          var i$, ref$, len$, ref1$, results$ = [];
          for (i$ = 0, len$ = (ref$ = methodIds).length; i$ < len$; ++i$) {
            ref1$ = ref$[i$], id = ref1$.id, name = ref1$.name;
            if (in$(name, methods)) {
              results$.push(id);
            }
          }
          return results$;
        }()));
        countriesStr = join(',')((function(){
          var i$, ref$, len$, ref1$, results$ = [];
          for (i$ = 0, len$ = (ref$ = countryIds).length; i$ < len$; ++i$) {
            ref1$ = ref$[i$], id = ref1$.id, name = ref1$.name;
            if (in$(name, countries)) {
              results$.push(id);
            }
          }
          return results$;
        }()));
        return "http://mobitransapi.mozook.com/devicetestingservice.svc/json/CreateDeviceTest?wurfl_id=" + wurflid + "&methods=" + methodsStr + "&countries=" + countriesStr;
      });
      createTestStandard = createTest(['KSA', 'UAE', 'Kuwait', 'Bahrain', 'Oman', 'Jordan', ' Qatar', 'Iraq', 'Azerbaijan']);
      return console.log(createTestStandard(['sms', 'JAVA_APP'], 13378));
    });
  });
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
  function in$(x, xs){
    var i = -1, l = xs.length >>> 0;
    while (++i < l) if (x === xs[i]) return true;
    return false;
  }
}).call(this);
