// Generated by LiveScript 1.2.0
(function(){
  var ref$, Obj, map, filter, find, fold, foldr, fold1, all, flatten, sum, groupBy, objToPairs, partition, join, unique, stats, json2csv, moment, fs, getStats, request, requestJson;
  ref$ = require('prelude-ls'), Obj = ref$.Obj, map = ref$.map, filter = ref$.filter, find = ref$.find, fold = ref$.fold, foldr = ref$.foldr, fold1 = ref$.fold1, all = ref$.all, flatten = ref$.flatten, sum = ref$.sum, groupBy = ref$.groupBy, objToPairs = ref$.objToPairs, partition = ref$.partition, join = ref$.join, unique = ref$.unique;
  stats = require('./stats');
  json2csv = require('./json2csv').json2csv;
  moment = require('moment');
  fs = require('fs');
  getStats = stats.getStats;
  request = require('request');
  requestJson = curry$(function(url, callback){
    return request(url, function(arg$, arg1$, body){
      return callback(JSON.parse(body));
    });
  });
  requestJson('http://mobitransapi.mozook.com/devicetestingservice.svc/json/GetAllCountries', function(countryIds){
    var countries, now, next, nextCountry;
    countries = [['KSA', 'sa'], ['Kuwait', 'kw'], ['Bahrain', 'bh'], ['Jordan', 'jo'], ['Qatar', 'qa'], ['Iraq', 'iq'], ['Thailand', 'th'], ['Azerbaijan', 'az']];
    now = moment();
    next = function(days, country, done){
      var fromDate;
      fromDate = moment('2013-08-12').add('days', days);
      console.log('next', country, fromDate.format("YYYY-MM-DD"));
      return getStats(fromDate.format("YYYY-MM-DD"), fromDate.add('days', 1).format("YYYY-MM-DD"), 0, country.id, function(obj){
        var data, d, m;
        data = flatten((function(){
          var i$, ref$, len$, lresult$, j$, ref1$, len1$, results$ = [];
          for (i$ = 0, len$ = (ref$ = obj).length; i$ < len$; ++i$) {
            d = ref$[i$];
            lresult$ = [];
            for (j$ = 0, len1$ = (ref1$ = d.stats).length; j$ < len1$; ++j$) {
              m = ref1$[j$];
              lresult$.push({
                brand_name: d.brand,
                model_name: d.model,
                wurfl_device_id: d.device,
                wurfl_fall_back: d.fall_back,
                Method: m.method,
                Visits: m.visits,
                'Op Sel Visits': 0,
                'Op Sel Visits Only': 0,
                'LP Visits': m.visits,
                Submissions: 0,
                Subscribers: m.subscribers,
                Conv: m.subscribers / m.visits,
                RealConv: m.subscribers / m.visits,
                marketing_name: d.brand + ' ' + d.model,
                device_os: d.os,
                device_os_version: 0,
                release_date: '',
                mobile_browser: ''
              });
            }
            results$.push(lresult$);
          }
          return results$;
        }()));
        return fs.writeFile('data/' + country.code + '-' + fromDate.add('days', -1).format('YYYY-MM-DD') + '.csv', json2csv(data), function(_){
          if (!fromDate.add('days', 1).isAfter(now)) {
            return next(days + 1, country, done);
          } else {
            return done();
          }
        });
      });
    };
    nextCountry = function(i){
      var ref$, name, code, countryId;
      ref$ = countries[i], name = ref$[0], code = ref$[1];
      countryId = find(function(it){
        return it.name === name;
      }, countryIds).id;
      console.log(code, countryId);
      return next(0, {
        code: code,
        id: countryId
      }, function(_){
        if (i < countries.length - 1) {
          return nextCountry(i + 1);
        }
      });
    };
    return nextCountry(0);
  });
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
