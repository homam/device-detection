// Generated by LiveScript 1.2.0
(function(){
  var ref$, Obj, map, filter, find, fold, foldr, fold1, all, flatten, sum, groupBy, objToPairs, partition, join, unique, request, treefy, lowerCaseData, requestJson, getTestStats, format;
  ref$ = require('prelude-ls'), Obj = ref$.Obj, map = ref$.map, filter = ref$.filter, find = ref$.find, fold = ref$.fold, foldr = ref$.foldr, fold1 = ref$.fold1, all = ref$.all, flatten = ref$.flatten, sum = ref$.sum, groupBy = ref$.groupBy, objToPairs = ref$.objToPairs, partition = ref$.partition, join = ref$.join, unique = ref$.unique;
  request = require('request');
  treefy = require('./treefy').treefy;
  lowerCaseData = function(data){
    var a, sx, s;
    return data = map(function(it){
      it[0].stats = it[1];
      return it[0];
    })((function(){
      var i$, ref$, len$, ref1$, results$ = [];
      for (i$ = 0, len$ = (ref$ = (fn$())).length; i$ < len$; ++i$) {
        ref1$ = ref$[i$], a = ref1$[0], sx = ref1$[1];
        results$.push([a, (fn1$())]);
      }
      return results$;
      function fn$(){
        var i$, ref$, len$, results$ = [];
        for (i$ = 0, len$ = (ref$ = data).length; i$ < len$; ++i$) {
          a = ref$[i$];
          results$.push([a, a.stats]);
        }
        return results$;
      }
      function fn1$(){
        var i$, ref$, len$, results$ = [];
        for (i$ = 0, len$ = (ref$ = sx).length; i$ < len$; ++i$) {
          s = ref$[i$];
          results$.push({
            method: s.Method,
            visits: s.Visits,
            subscribers: s.Subscribers
          });
        }
        return results$;
      }
    }()));
  };
  requestJson = curry$(function(url, callback){
    return request(url, function(arg$, arg1$, body){
      return callback(JSON.parse(body));
    });
  });
  getTestStats = curry$(function(testid, from, to, country, callback){
    var url;
    url = "http://mobitransapi.mozook.com/devicetestingservice.svc/json/GetTestStats?test_id=" + testid + "&start_date=" + from + "&end_date=" + to + "&country_id=" + country + "&visits=0";
    return requestJson(url, callback);
  });
  exports.testTree = function(testId, fromDate, toDate, country, callback){
    country == null && (country = 0);
    return getTestStats(testId, fromDate, toDate, country)(function(data){
      return callback(treefy(lowerCaseData(data)));
    });
  };
  exports.testSummary = function(testId, fromDate, toDate, country, callback){
    country == null && (country = 0);
    return getTestStats(testId, fromDate, toDate, country)(function(data){
      return callback(format(lowerCaseData(data)));
    });
  };
  format = function(data){
    var format, percentFormat, methodGroups, sumProp;
    format = curry$(function(s, v){
      switch (false) {
      case '%' !== s:
        return Math.floor(v * 10000) / 100 + '%';
      default:
        return v;
      }
    });
    percentFormat = format('%');
    methodGroups = function(){
      return groupBy(function(it){
        return it.method;
      })(flatten(map(function(it){
        return it.stats;
      }).apply(this, arguments)));
    };
    sumProp = function(p){
      return function(){
        return sum(map(function(a){
          return a[p];
        }).apply(this, arguments));
      };
    };
    return function(it){
      var i$, len$, ref$, a, v, s, results$ = [];
      for (i$ = 0, len$ = it.length; i$ < len$; ++i$) {
        ref$ = it[i$], a = ref$[0], v = ref$[1], s = ref$[2];
        results$.push([
          a, {
            visits: v,
            subscribers: s,
            conversion: percentFormat(s / v)
          }
        ]);
      }
      return results$;
    }(function(it){
      var i$, len$, ref$, a, b, results$ = [];
      for (i$ = 0, len$ = it.length; i$ < len$; ++i$) {
        ref$ = it[i$], a = ref$[0], b = ref$[1];
        results$.push([a, sumProp('visits')(b), sumProp('subscribers')(b)]);
      }
      return results$;
    }(objToPairs(methodGroups(data))));
  };
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
